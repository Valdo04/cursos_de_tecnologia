# -*- coding: utf-8 -*-
"""M1S3-AtividadesPráticas-Jupyter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZzuTGbzc2kVlCN8RxE9GxIu7qYxhcXrg

#**Revisão do conteúdo até M1S3**

*   Variáveis
*   Operações Básicas (+, -, *, /) | (> < == !=) | (and or not)
*   Estruturas condicionais (if | elif | else)
*   Estruturas de Repetição (while | for)
"""

#Exemplo 1 - Soma de duas variáveis
x = int(input("Digite o valor 1: "))
y = int(input("Digite o valor 2: "))
z = int(input("Digite o valor 3: "))
soma = x+y+z
print(soma)

#Exemplo 2 - Média de duas variáveis
x = int(input("Digite o valor 1: "))
y = int(input("Digite o valor 2: "))
media = (x+y)/2
print(media)

"""#**Revisão do conteúdo semanal (M1S3)**

*   Strings
*   Listas
*   Tuplas
*   Dicionários
"""

#Como lidar com N variáveis?
cliente1 = "Leoncio"
cliente2 = "Maria"
cliente3 = "Wesley"
print(cliente1)
print(cliente2)
print(cliente3)

mensagem = "Olá mundo!"
print(mensagem.upper())
print(mensagem.lower())

"""##Strings"""

#Trabalhando com listas de caracteres (Strings)
#Indices 0123456789.....
nome  = "Sherlon Almeida"
print(nome[0])
print(nome[1])
print(nome[2])
print(nome[3])
print(nome[4])
print(nome[5])
print(nome[6])
print(nome[7])
print(nome[8])

#Repetição
#Indices 0123456789.....
nome  = "Olá mundo, e olá pessoal da turma PD1023A!"

for i in range(15):
  print(i, nome[i])

#len() -> length -> Comprimento/tamanho

#Indices 0123456789.....
texto = "Olá pessoal da turma PD1023A!"
tamanho = len(texto)
print(tamanho)

for i in range(tamanho):
  print(i, texto[i])

#Slicing -> Fatiamento (pedaços)
#Indices:0123456789.....
texto = "Olá pessoal da turma PD1023A!"
print(texto[0:2+1])
print(texto[4:10+1])
print(texto[4:])

texto1 = "Olá"
texto2 = 'Olá'
texto3 = """Olá"""
texto4 = '''Olá'''
print(texto1, texto2, texto3, texto4)

"""##Listas [ ]"""

#Trabalhando com listas de Strings
#Indices:       0         1         2         3         4
clientes = ["Leoncio", "Maria", "Wesley", "Sherlon", "Dauto"]
print(clientes) #Mostro o conteúdo TOTAL da minha lista
print(clientes[0]) #Mostro apenas o nome "Leoncio"
tamanho = len(clientes)
print(f"Existem {tamanho} clientes cadastrados na lista!")
for i in range(tamanho):
  print(i, clientes[i])

for i in [0, 1, 2, 3, 4]:
  print(i)

for i in [1, 3, 9, 14, 25]:
  print(i)

#Trabalhando com listas numéricas
#Indices:        0      1       2
precos   = [   4.90,   5.70,  39.99]
produtos = ["Leite", "Ovos", "Carne"]

tamanho = len(precos)
for indice in range(tamanho):
  print(indice, precos[indice], produtos[indice])

for preco in precos:
  print(preco)

for produto in produtos:
  print(produto)

for indice, produto in enumerate(produtos):
  print(indice, produto, precos[indice])

precos   = [   4.90,   5.70,  39.99]
produtos = ["Leite", "Ovos", "Carne"]

estoque = zip(precos, produtos)
for produtos in estoque:
  print(produtos)

#Trabalhando com listas mistas
#Colunas:     0       1
estoque = [                  #Linhas
            [4.90, "Leite"], #0
            [5.70, "Ovos"],  #1
            [39.99, "Carne"] #2
          ]
print(estoque)
print(estoque[0])
print(estoque[1])
print(estoque[2])

print(estoque[0][0])
print(estoque[0][1])

#Colunas:     0       1
estoque = [                  #Linhas
            [4.90, "Leite"], #0
            [5.70, "Ovos"],  #1
            [39.99, "Carne"] #2
          ]
print(estoque[1][0])

#Indices:         0                  1                2
#Indices:     0       1          0      1         0       1
estoque = [ [4.90, "Leite"],   [5.70, "Ovos"], [39.99, "Carne"]]

for produto in estoque:
  preco = produto[0]
  descricao = produto[1]
  print(f"O produto {descricao} custa R${preco}")

#Criando um tabuleiro de Xadrez
#Colunas:      0    1    2    #Linhas
tabuleiro = [["a", "b", "c"], #0
             ["d", "e", "f"], #1
             ["g", "h", "i"], #2
             ["j", "k", [9]]] #3
print(tabuleiro[1][2]) #Mostrando a letra 'f'
print(tabuleiro[3][0]) #Mostrando a letra 'j'
print(tabuleiro[3][2][0]) #Mostrando o numero '9'

#List comprehension
linhas  = 5
colunas = 10
tabuleiro = [ [ 'x' for j in range(colunas)] for i in range(linhas) ]
for linha in tabuleiro:
  print(linha)

#Apresentando o comando .append()
carrinho_compras = []
print(carrinho_compras, len(carrinho_compras))

carrinho_compras.append("Leite")
print(carrinho_compras, len(carrinho_compras))

carrinho_compras.append("Ovos")
print(carrinho_compras, len(carrinho_compras))

carrinho_compras = []
for i in range(3):
  produto = input("Digite o produto:")
  carrinho_compras.append(produto)
  print(carrinho_compras, len(carrinho_compras))

#Apresentando o comando .append()
carrinho_compras = []
while True:
  print("1) Cadastrar produto, 2) Mostrar estoque, 0) Sair")
  opcao = int(input("Digite a opção desejada: "))
  if opcao == 0:
    print("Programa finalizado!")
    break
  elif opcao == 1: #Cadastro
    produto = input("Digite o produto:")
    carrinho_compras.append(produto)
  elif opcao == 2:
    print(f"O estoque contém {len(carrinho_compras)} produtos")
    print("Estoque:", carrinho_compras)
  else:
    print("Opção inválida!")

#Deletando dados de listas (pelo indice)
carrinho_compras = ['Leite', 'Ovos', 'Carne']
print("Antes:", carrinho_compras)
del carrinho_compras[1]
print("Antes:", carrinho_compras)

#Deletando dados de listas (pelo valor)
carrinho_compras = ['Leite', 'Ovos', 'Carne', "Ovos"]
print("Antes:", carrinho_compras)
carrinho_compras.remove("Ovos")
print("Depois:", carrinho_compras)

#Contar quantidade de elementos
carrinho_compras = ['Leite', 'Ovos', 'Carne', "Banana", "Batata", "Tomate", "Ovos"]
print(carrinho_compras.count("Ovos"))

#Ordenando listas
print("Antes:", carrinho_compras)
carrinho_compras.sort()
print("Depois:", carrinho_compras)

#Encontrando uma posição em uma lista
carrinho_compras = ['Leite', 'Ovos', 'Carne', "Banana", "Batata", "Tomate", "Ovos"]
posicao_na_lista = carrinho_compras.index("Banana")
print(posicao_na_lista)

#Sobreescrever elementos de uma lista
clientes = ["Karloos", "Sherlon", "Maria"]
print("Antes:", clientes)
clientes[0] = input("Digite o nome novamente: ")
print("Depois:", clientes)

#Apresentando o comando .append()
carrinho_compras = []
while True:
  print("1) Cadastrar produto, 2) Deletar produto, 3) Mostrar estoque, 0) Sair")
  opcao = int(input("Digite a opção desejada: "))
  if opcao == 0:
    print("Programa finalizado!")
    break
  elif opcao == 1: #Cadastro
    produto = input("Digite o produto:")
    carrinho_compras.append(produto)
  elif opcao == 2:
    print("Estoque:", carrinho_compras)
    produto = input("Digite o produto a ser removido:")
    if produto in carrinho_compras:
      carrinho_compras.remove(produto)
      print("Produto removido com sucesso!")
    else:
      print("O produto não existe na lista de compras.")
  elif opcao == 3:
    print(f"O estoque contém {len(carrinho_compras)} produtos")
    print("Estoque:", carrinho_compras)
  else:
    print("Opção inválida!")

"""##Tuplas ( ) (Imutáveis)"""

clientes = ("Karloos", "Sherlon", "Maria")
print("Antes:", clientes)
clientes[0] = "Carlos" #ERRO: Pois Tuplas são IMUTÁVEIS!
print("Depois:", clientes)

"""##Dicionários { }"""

#Apresentando o conceito {chave: valor}
cliente = {"Nome": "Sherlon",
           "CPF": "333.333.333-33",
           "Idade": 28,
           "Transacoes": {"Saque": [45, 79, 20],
                          "Depositos": [450, 89, 784]}
           }
print(cliente)
print(f"Nome: {cliente['Nome']}")
print(f"CPF: {cliente['CPF']}")
print(f"Idade: {cliente['Idade']}")
print(f"Transacoes: {cliente['Transacoes']}")

#Formas de formatação de prints
print(f"Saque: {cliente['Transacoes']['Saque']}")
print("Saque: {}".format(cliente['Transacoes']['Saque']))
print("Saque:", cliente['Transacoes']['Saque'])

#Adicionando valores
cliente = {}
cliente["Nome"] = "Sherlon"
cliente["CPF"] = "333.333.333-33"
cliente["Idade"] = 28

cliente["Contato"] = []
cliente["Contato"].append("(99)99999-9999")
cliente["Contato"].append("(99)88888-8888")
cliente["Contato"].append("(99)77777-7777")

print(cliente["Contato"])
print(cliente["Contato"][0])
print(cliente["Contato"][1])
print(cliente["Contato"][2])

#Modificando Valores
cliente = {}
cliente["Nome"] = "Sherlon"
cliente["CPF"] = "333.333.333-33"
cliente["Idade"] = 28

print("Antes:", cliente)
cliente["Idade"] = int(input("Digite a nova idade: "))
print("Depois:", cliente)

"""#Cadastro de Produtos"""

#Lista de Dicionários
estoque = [] #Armazenar produtos

while True:
  print("1) Cadastrar produto, 2) Deletar produto, 3) Mostrar estoque, 0) Sair")
  opcao = int(input("Digite a opção desejada: "))
  if opcao == 0:
    print("Programa finalizado!")
    break
  elif opcao == 1: #Cadastro
    produto = {} #Guardar informações do produto atual

    #Obter tais informações do produto
    produto["Nome"] = input("Digite o produto: ")
    produto["Preco"] = float(input("Digite o preco do produto: "))
    produto["Descricao"] = input("Digite a descrição do produto: ")

    #Armazenar na lista (Estoque)
    estoque.append(produto)
  elif opcao == 2:
    print("Estoque:")
    for indice,produto in enumerate(estoque):
      print(f"---> Indice: {indice}, Produto: {produto['Nome']}, Preço: {produto['Preco']}, Descrição: {produto['Descricao']}")
    indice_a_ser_removido = int(input("Digite o indice do produto a ser removido: "))
    del estoque[indice_a_ser_removido]
    print("Produto removido com sucesso!")
  elif opcao == 3:
    print(f"O estoque contém {len(estoque)} produtos")
    print("Estoque:")
    for produto in estoque:
      print(f"---> Produto: {produto['Nome']}, Preço: {produto['Preco']},, Descrição: {produto['Descricao']}")
  else:
    print("Opção inválida!")

"""#------ ATÉ AQUI ------

##Funções
"""

#O que é uma função?

#Exemplo *args

#Exemplo **kwargs

"""##Classes e Programação Orientada a Objetos (POO) ([Referência](https://tmfilho.github.io/pyestbook/objects/02_cpyt.html))"""

class Pessoa:
  #Construtor (inicializa o objeto)
  def __init__(self, nome):

    #Atributos (como variáveis)
    self.name = nome

  #Metodo (como funções)
  def mostrar_nome(self):
    print(self.name)

nome = "Sherlon"
pessoa = Pessoa(nome)
pessoa.mostrar_nome()

"""#**Atividade da Semana** (Nova)

Olá! Você foi contratado (a) como programador (a) do Ultima-Bank, o melhor banco da América Latina!

O Ultima-Bank ainda é um banco novo, então alguns processos internos ainda estão sendo realizados de maneira manual, com muita papelada envolvida!

Para agilizar os processos internos, você foi encarregado (a) de desenvolver um sistema de cadastro de novos clientes utilizando Python!

Você entregará nesta tarefa apenas um protótipo para o cadastro de 5 clientes, e caso dê certo, expandiremos para todos os milhões de clientes do Ultima-Bank.

Os dados a serem salvos são:
- Nome (String)
- CPF (String)
- Idade (Inteiro)

**Dicas:**
- Você pode criar uma lista para adicionar todos os clientes;
- Você pode usar um dicionário para armazenar cada cliente;
- Você vai obter os dados pela entrada padrão (usando a função input()).
- **Extra (Opcional):** Desenvolver utilizando classes.

**Saída do seu programa:**
- Você deve mostrar a seguinte mensagem para cada cliente: `print("Cliente:", cliente["Nome"], "CPF:", cliente["CPF"], "Idade:", cliente["Idade"])`
- Por exemplo: `Cliente: John Snow CPF: 963.125.345-78 Idade: 24`
- Mostre os cinco clientes, um após o outro.
"""

clientes = [] #Lista de Clientes

for cliente in range(5):
  #Comece seu código aqui

"""#Gabarito (Sem Classes)"""

clientes = [] #Lista de Clientes

for cliente in range(5):
  nome  = input()
  cpf   = input()
  idade = int(input())

  cadastro_atual = {} #Dados do cliente atual
  cadastro_atual["Nome"]  = nome
  cadastro_atual["CPF"]   = cpf
  cadastro_atual["Idade"] = idade
  clientes.append(cadastro_atual)

for cliente in clientes:
  print("Cliente:", cliente["Nome"], "CPF:", cliente["CPF"], "Idade:", cliente["Idade"])

"""#Gabarito (Com Classes)"""

class Cliente:
  #Construtor (inicializa o objeto)
  def __init__(self):
    #Atributos (como variáveis)
    self.nome  = None
    self.cpf   = None
    self.idade = None

  #Metodo (como funções)
  def mostrar_dados(self):
    print("Cliente:", self.nome, "CPF:", self.cpf, "Idade:", self.idade)

  def cadastro(self):
    self.nome  = input()
    self.cpf   = input()
    self.idade = int(input())

clientes = [] #Lista de clientes

for cliente in range(5):
  cadastro_atual = Cliente() #Cria o objeto
  cadastro_atual.cadastro()  #Realiza o cadastro do cliente atual
  clientes.append(cadastro_atual) #Salva o cliente atual na lista de clientes

#Mostrando os dados dos Clientes
for cliente in clientes:
  cliente.mostrar_dados()